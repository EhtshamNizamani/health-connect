
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:health_connect/core/di/service_locator.dart';
import 'package:health_connect/core/shared/widgets/custom_button.dart';
import 'package:health_connect/features/auth/domain/entities/user_entity.dart';
import 'package:health_connect/features/auth/presentation/auth/blocs/auth_bloc.dart';
import 'package:health_connect/features/auth/presentation/auth/blocs/auth_state.dart';
import 'package:health_connect/features/doctor/review/domain/entity/review_entity.dart';
import 'package:health_connect/features/doctor/review/presantation/bloc/review_bloc.dart';
import 'package:health_connect/features/doctor/review/presantation/bloc/review_event.dart';
import 'package:health_connect/features/doctor/review/presantation/bloc/review_state.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';

class AddReviewScreen extends StatefulWidget {
  final String doctorId;
  final String appointmentId;

  const AddReviewScreen({
    super.key,
    required this.doctorId,
    required this.appointmentId,
  });

  @override
  State<AddReviewScreen> createState() => _AddReviewScreenState();
}

class _AddReviewScreenState extends State<AddReviewScreen> {
  final _commentController = TextEditingController();
  double _rating = 3.0; // Default rating

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  void _submitReview(BuildContext context) {
    // Get the current user's details from AuthBloc
    final authState = context.read<AuthBloc>().state;
    UserEntity? currentUser;
    if (authState is AuthenticatedPatient) {
      currentUser = authState.user;
    }
    // You might want to handle other authenticated states if necessary

    if (currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Error: User not found. Please log in again.")),
      );
      return;
    }

    final reviewEntity = ReviewEntity(
      id: '', // ID will be generated by Firestore
      rating: _rating,
      comment: _commentController.text.trim(),
      patientId: currentUser.id,
      patientName: currentUser.name,
      patientPhotoUrl: '', // Add this if you store patient photos
      timestamp: Timestamp.now(),
    );

    context.read<ReviewBloc>().add(
          SubmitReview(
            widget.doctorId,
             widget.appointmentId,
           reviewEntity,
          ),
        );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return BlocProvider(
      create: (context) => sl<ReviewBloc>(),
      child: Scaffold(
        appBar: AppBar(
          title: const Text('Write a Review'),
        ),
        body: BlocConsumer<ReviewBloc, ReviewState>(
          listener: (context, state) {
            if (state is ReviewSuccessState) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text("Thank you for your feedback!")),
              );
              // Pop the screen after a short delay to let the user see the success
              Future.delayed(const Duration(milliseconds: 500), () {
                Navigator.of(context).pop();
              });
            }
            if (state is ReviewFailureState) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text("Error: ${state.message}"),
                  backgroundColor: theme.colorScheme.error,
                ),
              );
            }
          },
          builder: (context, state) {
            final isLoading = state is ReviewLoadingState;

            return SingleChildScrollView(
              padding: EdgeInsets.all(16.w),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Text(
                    'How was your visit?',
                    style: theme.textTheme.headlineSmall,
                  ),
                  SizedBox(height: 8.h),
                  Text(
                    'Your feedback helps other patients make better choices.',
                    textAlign: TextAlign.center,
                    style: theme.textTheme.bodyMedium,
                  ),
                  SizedBox(height: 32.h),

                  // --- Star Rating Bar ---
                  RatingBar.builder(
                    initialRating: _rating,
                    minRating: 1,
                    direction: Axis.horizontal,
                    allowHalfRating: true,
                    itemCount: 5,
                    itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),
                    itemBuilder: (context, _) => Icon(
                      Icons.star,
                      color: Colors.amber,
                    ),
                    onRatingUpdate: (rating) {
                      setState(() {
                        _rating = rating;
                      });
                    },
                  ),
                  SizedBox(height: 32.h),

                  // --- Comment Text Field ---
                  TextFormField(
                    controller: _commentController,
                    maxLines: 5,
                    decoration: InputDecoration(
                      hintText: 'Share your experience (optional)...',
                      labelText: 'Your Review',
                      alignLabelWithHint: true,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12.r),
                      ),
                    ),
                  ),
                  SizedBox(height: 32.h),

                  // --- Submit Button ---
                  CustomButton(
                    text: 'Submit Review',
                    isLoading: isLoading,
                    onTap: () => _submitReview(context),
                  ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}